.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "NETSYNC 1"
.TH NETSYNC 1 "2013-09-19" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
netsync \- network/database utility
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\f(CW\*(C`netsync [\-hVvqcpDda] [nodes]\*(C'\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
netsync is a network synchronization tool that:
.PP
.Vb 3
\& \- maps network interfaces to their respective (potentially stacked) devices>
\& \- gathers interface\-specific information from an asset management database>
\& \- sends the information it gathers to each device>
.Ve
.PP
Note: All communication with network nodes is done using \s-1SNMP\s0,
      and the database is assumed to track devices by serial number.
.PP
netsync also provides ways of producing useful information about the network.
.SS "Overview"
.IX Subsection "Overview"
Execution begins with the parsing of the configuration file (\-c).
netsync discovers all active network devices listed in [nodes] or \s-1DNS\s0.
It uses gathered information to identify each device in a provided database.
Identified devices are then updated unless probing is used.
.PP
See \fIdoc/netsync.svg\fR for corresponding visual guidance.
.SS "0 Invocation"
.IX Subsection "0 Invocation"
\fISuggested Method\fR
.IX Subsection "Suggested Method"
.PP
netsync may be invoked using the provided script, \fInetsync.sh\fR.
The script creates an executable in bin and runs it with the correct libraries.
.PP
\fIPerl\fR
.IX Subsection "Perl"
.PP
The Perl implementation may be invoked manually;
however, this is not suggested because appropriate libraries must be included at runtime (see below),
and using the included script allows more fine-tune control over netsync's environment to developers.
.PP
Libraries
.IX Subsection "Libraries"
.PP
A generic set of useful packages is stored in the Toolbox module in src/lib.
Following is a brief description of each:
.PP
.Vb 4
\& Toolbox::Configurator  \- methods for handling configuration files and default settings
\& Toolbox::FileManager   \- methods for handling I/O automatically and efficiently
\& Toolbox::TimeKeeper    \- methods for retrieving reliable chronological measurements
\& Toolbox::UserInterface \- methods for interacting with the user
.Ve
.PP
Manual Build (optional)
.IX Subsection "Manual Build (optional)"
.PP
.Vb 2
\& $ cp src/netsync.pl bin/netsync
\& $ chmod +x bin/netsync
.Ve
.PP
Manual Invocation
.IX Subsection "Manual Invocation"
.PP
.Vb 1
\& $ perl \-Isrc/lib bin/netsync
.Ve
.PP
If Manual Build was skipped, use the following instead:
.PP
.Vb 1
\& $ perl \-Isrc/lib src/netsync.pl
.Ve
.SS "1 Runtime Configuration"
.IX Subsection "1 Runtime Configuration"
\fIOptions\fR
.IX Subsection "Options"
.PP
\-h \-\-help
.IX Subsection "-h --help"
.PP
Help. Print usage and options.
.PP
Note: Help and Version print information and exit, netsync is not executed in either case.
.PP
\-V
.IX Subsection "-V"
.PP
Version. Print build information.
Note: Help and Version print information and exit, netsync is not executed in either case.
.PP
\-v
.IX Subsection "-v"
.PP
Verbose. Print everything.
.PP
Note: If both Quiet and Verbose mode are used simultaneously, they cancel each other out.
.PP
\-q
.IX Subsection "-q"
.PP
Quiet. Print nothing.
.PP
Note: If both Quiet and Verbose mode are used simultaneously, they cancel each other out.
.PP
\-c .ini
.IX Subsection "-c .ini"
.PP
Specify a configuration file to use. (default: \fIetc/netsync.ini\fR)
.PP
\-p #
.IX Subsection "-p #"
.PP
Probe. There are 2 probe levels:
.PP
.Vb 2
\& 1: Probe the network for active nodes.
\& 2: Probe the database for those nodes.
.Ve
.PP
\-D pattern
.IX Subsection "-D pattern"
.PP
Use \s-1DNS\s0 to retrieve a list of hosts matching the pattern.
.PP
Hint: Use the pattern 'all' to turn off the hostname filter.
.PP
\-d .csv
.IX Subsection "-d .csv"
.PP
Specify an RFC4180\-compliant database file to use.
.PP
\-a
.IX Subsection "-a"
.PP
Enable interface auto-matching.
.PP
Note: Interface auto-matching is very likely to be helpful if the database manages interfaces numerically.
If enabled, it causes a database port such as 23 to align with ifNames such as ethernet23 or Gi1/0/23.
.PP
\fIParameters\fR
.IX Subsection "Parameters"
.PP
[nodes]
.IX Subsection "[nodes]"
.PP
Specify an RFC1035\-compliant network node list to use.
.PP
Note: Either \-D pattern or nodes must be specified.
If neither are present, input will be read from standard input (a pipe or the keyboard).
.SS "2 Settings"
.IX Subsection "2 Settings"
A configuration file may be specified using the \-c option.
Otherwise, a generic configuration file (etc/netsync.ini) is provided,
but it does not have enough information for netsync to be fully functional out-of-the-box.
Namely, the following settings must be provided for a sufficient runtime environment:
.PP
\fI\s-1DNS\s0\fR
.IX Subsection "DNS"
.PP
Note: \s-1DNS\s0 settings are not necessary if only RFC1035\-compliant node lists will be used (see [nodes]).
.PP
domain
.IX Subsection "domain"
.PP
a \s-1FQDN\s0 e.g. example.com
.PP
\fI\s-1SNMP\s0\fR
.IX Subsection "SNMP"
.PP
Version
.IX Subsection "Version"
.PP
Note: netsync should work out-of-the-box on a network with default \s-1SNMP\s0 settings,
      but it is not recommended to operate a network with such an insecure configuration.
.IP "SNMPv3 (recommended)" 5
.IX Item "SNMPv3 (recommended)"
.Vb 4
\& SecLevel  \- (If this is left default, there isn\*(Aqt much benefit to using SNMPv3 over v2.)
\& SecName   \- username (default: initial)
\& AuthPass  \- the authentication (access) key
\& PrivPass  \- the privacy (encryption) key
.Ve
.IP "SNMPv2" 5
.IX Item "SNMPv2"
.Vb 1
\& Community \- The SNMP community to address (default: public).
.Ve
.PP
\fI\s-1DB\s0\fR
.IX Subsection "DB"
.PP
Note: \s-1DB\s0 settings are not necessary if only RFC4180\-compliant database (.csv) files will be used (see \-d).
.PP
\s-1DBMS\s0
.IX Subsection "DBMS"
.PP
the type of database e.g. Oracle
.PP
Server
.IX Subsection "Server"
.PP
the database location
.PP
Port
.IX Subsection "Port"
.PP
the database location
.PP
Database
.IX Subsection "Database"
.PP
the name of the database
.PP
\s-1DSN\s0
.IX Subsection "DSN"
.PP
DBMS-specific connection details
.PP
Username
.IX Subsection "Username"
.PP
the name of a user that has access to the database
.PP
Password
.IX Subsection "Password"
.PP
the authentication key of the user
.PP
\fInetsync\fR
.IX Subsection "netsync"
.PP
.Vb 7
\&                           Table
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\& |  DeviceField  |  InterfaceField  |  InfoFields...     |
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-                              =============
\& |   (serial)    |     (ifName)     |(interface\-specific)|   \-\-\->    netsync    \-\-\->    || SyncOID ||
\& |                          ...                          |                              =============
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-                                    (device)
.Ve
.PP
Note: Once netsync has identified an interface in the database with its corresponding interface on the network,
      it will overwrite the device with the InfoFields in the database.
.PP
Table
.IX Subsection "Table"
.PP
the name of the table in the database that contains the following fields
.PP
DeviceField
.IX Subsection "DeviceField"
.PP
the field that provides a unique \s-1ID\s0 for each device
.PP
InterfaceField
.IX Subsection "InterfaceField"
.PP
the field that holds interface names retrieved from the IF-MIB (ifName) via \s-1SNMP\s0
.PP
InfoFields
.IX Subsection "InfoFields"
.PP
a comma-separated list of fields containing interface-specific information
.PP
SyncOID
.IX Subsection "SyncOID"
.PP
Values from InfoFields will be concatenated (respectively) and stored in the device via \s-1SNMP\s0.
.PP
\fIOptional\fR
.IX Subsection "Optional"
.PP
Explanation of each log and cache file will be provided in context below.
.PP
Indent
.IX Subsection "Indent"
.PP
a formatting option to specify the number of spaces to proceed details of a previous line
.PP
NodeOrder
.IX Subsection "NodeOrder"
.PP
a formatting option to adapt discovered node counts to any size network (must be > 0)
.PP
Example
.Sp
.RS 5
NodeOrder = 3 (nodes < 1000), 780 nodes
.Sp
.Vb 1
\& > discovering (using DNS)... 780 nodes (50 inactive), 800 devices (10 stacks)
.Ve
.Sp
NodeOrder = 9 (nodes < 1000000000), 780 nodes
.Sp
.Vb 1
\& > discovering (using DNS)...       780 nodes (50 inactive), 800 devices (10 stacks)
.Ve
.Sp
NodeOrder = 1 (nodes < 10), 24 nodes !
.Sp
.Vb 1
\& > discovering (using DNS)... 1111111111222224 nodes (5 inactive), 26 devices (1 stack)
.Ve
.RE
.SS "3 Data Structures"
.IX Subsection "3 Data Structures"
netsync builds an internal view of the network whenever it is run.
Each node is associated with its \s-1IP\s0 address and device(s).
Each device is associated with is serial and interface(s).
Each interface is associated with interface-specific information from the database.
.PP
The resulting data structure could be described as a list of trees.
.PP
.Vb 10
\& |\-> node (IP)
\& |\-> node (IP)
\& |\-> node (IP)
\& |                              \-interface (ifName)
\& |                             /
\& |             \-device (serial)\-\-interface (ifName)
\& |            /                \e
\& |\-V node (IP)                  \-interface (ifName)
\& |            \e
\& |             \-device (serial)\-\-interface (ifName)
\& |                             \e
\& |                              \-interface (ifName)
\& |\-> node (IP)
\& |\-> node (IP)
\& |                              \-interface (ifName)
\& |                             /
\& |\-V node (IP)\-\-device (serial)\-\-interface (ifName)
\& |                             \e
\& |                              \-interface (ifName)
\& |\-> node (IP)
\& |\-> node (IP)
\& |\-> node (IP)
\& |\-> node (IP)
\& ...
.Ve
.PP
\fIStates\fR
.IX Subsection "States"
.PP
Nodes
.IX Subsection "Nodes"
.PP
.Vb 2
\&       active : reachable and responsive
\&     inactive : unreachable or unresponsive
.Ve
.PP
Devices & Interfaces
.IX Subsection "Devices & Interfaces"
.PP
.Vb 4
\&   recognized : found on the network and in the database
\& unrecognized : found on the network but not in the database
\&   identified : found in the database and on the network
\& unidentified : found in the database but not on the network
.Ve
.PP
Invariants
.Sp
.Vb 3
\&          recognized <\-> identified
\& unrecognized device \-\-> unrecognized interfaces
\& unidentified device \-\-> unidentified interfaces
.Ve
.SS "4 Discovery"
.IX Subsection "4 Discovery"
The first task netsync has is to find all relevant nodes on the network.
Relevant nodes are specified one of three ways:
.PP
\fIusing \-D pattern\fR
.IX Subsection "using -D pattern"
.PP
The pattern is used to select appropriate hosts.
.PP
Example
.Sp
.Vb 4
\& $ netsync.sh \-D "sw[^.]+|hub[0\-9]+"
\& www.example.com            <\-\- no match (www)
\& hub123.example.com         <\-\- match (hub123)
\& sw1234.example.com         <\-\- match (sw1234)
.Ve
.PP
\fIusing [nodes]\fR
.IX Subsection "using [nodes]"
.PP
[nodes] is a path to a file containing an RFC1035\-compliant list of relevant nodes.
.PP
About \s-1RFC1035\s0
.IX Subsection "About RFC1035"
.PP
\&\s-1RFC1035\s0 specifies a satisfactory format for resource records found in a nameserver (see 3.2.1).
This format is used to produce the output of the popular command-line utility dig.
Thus, for simple pipes as described in part 3 above, netsync accepts RFC1035\-compliant input.
.PP
Note: Only A or \s-1AAAA\s0 records with valid IPv4 or IPv6 addresses are used.
.PP
\fIusing (pipe or keyboard)\fR
.IX Subsection "using (pipe or keyboard)"
.PP
When no input directives are detected, netsync attempts to pull a node list from standard input.
This allows pipelining with dig, grep, and other command-line utilities for extended functionality.
.PP
Examples
.Sp
.Vb 1
\& $ dig axfr example.com | grep hub123 | netsync.sh
.Ve
.Sp
.RS 4

.Sp
.Vb 1
\& $ cat superset.txt | grep hub[0\-9]+ | netsync.sh
.Ve
.RE
.SS "5 Node Processing"
.IX Subsection "5 Node Processing"
Once all relevant nodes have been specified, netsync must attempt to contact each to see if it is active.
Any node that netsync attempts to contact is logged in NodeLog with the results of the attempt.
If the node is active, netsync will try to extract the serial numbers of all devices present at that node.
If more than one serial is discovered, netsync will try to map interfaces to each device (serial).
.PP
Note: Only \s-1ASCII\s0 serials are supported.
.PP
\fISupported Node Vendors\fR
.IX Subsection "Supported Node Vendors"
.IP "Brocade" 4
.IX Item "Brocade"
.PD 0
.IP "Cisco" 4
.IX Item "Cisco"
.IP "\s-1HP\s0" 4
.IX Item "HP"
.PD
.PP
\fISupported Stack Vendors\fR
.IX Subsection "Supported Stack Vendors"
.IP "Brocade" 4
.IX Item "Brocade"
.PD 0
.IP "Cisco" 4
.IX Item "Cisco"
.PD
.PP
\fIMapping Process\fR
.IX Subsection "Mapping Process"
.IP "1 Extract interfaces." 4
.IX Item "1 Extract interfaces."
.RS 4
.PD 0
.IP "standard" 5
.IX Item "standard"
.PD
.Vb 4
\& [1]  1.3.6.1.2.1.2.2.1.3  (ifType)  : appropriate interface IID
\&     excluded: other(1), softwareLoopback(24), propVirtual(53)
\& [2a] 1.3.6.1.2.1.31.1.1.1 (ifName)  : interface IID to ifName
\& [2b] 1.3.6.1.2.1.2.2.1.2  (ifDescr) : interface IID to ifDescr
.Ve
.IP "proprietary" 5
.IX Item "proprietary"
.Vb 1
\& [unsupported]
.Ve
.RE
.RS 4
.RE
.IP "2 Extract serials." 4
.IX Item "2 Extract serials."
.RS 4
.PD 0
.IP "standard" 5
.IX Item "standard"
.PD
.Vb 3
\& [1] 1.3.6.1.2.1.47.1.1.1.1.5  (entPhysicalClass)     : appropriate device IID
\&     included: chassis(3)
\& [2] 1.3.6.1.2.1.47.1.1.1.1.11 (entPhysicalSerialNum) : device IID to serial
.Ve
.IP "proprietary" 5
.IX Item "proprietary"
.RS 5
.PD 0
.IP "Cisco" 6
.IX Item "Cisco"
.PD
.Vb 2
\& [a] 1.3.6.1.4.1.9.5.1.3.1.1.3  (moduleSerialNumber)
\& [b] 1.3.6.1.4.1.9.5.1.3.1.1.26 (moduleSerialNumberString)
.Ve
.IP "Brocade" 6
.IX Item "Brocade"
.Vb 3
\& [a] 1.3.6.1.4.1.1991.1.1.1.4.1.1.2 (snChasUnitSerNum)
\& [b] 1.3.6.1.4.1.1991.1.1.1.1.2     (snChasSerNum)
\&     Note: This OID does NOT support stacks.
.Ve
.IP "\s-1HP\s0" 6
.IX Item "HP"
.Vb 1
\& [a] 1.3.6.1.4.1.11.2.36.1.1.2.9 (hpHttpMgSerialNumber)
.Ve
.RE
.RS 5
.RE
.RE
.RS 4
.RE
.IP "3 Map interfaces to serials." 4
.IX Item "3 Map interfaces to serials."
.RS 4
.PD 0
.IP "standard" 5
.IX Item "standard"
.PD
.Vb 1
\& [unsupported]
.Ve
.IP "proprietary" 5
.IX Item "proprietary"
.RS 5
.PD 0
.IP "Cisco" 6
.IX Item "Cisco"
.PD
.Vb 4
\& [1]  1.3.6.1.4.1.9.5.1.4.1.1.11 (portIfIndex)              : port IID to interface IID
\& [2]  1.3.6.1.4.1.9.5.1.4.1.1.1  (portModuleIndex)          : port IID to module IID
\& [3a] 1.3.6.1.4.1.9.5.1.3.1.1.3  (moduleSerialNumber)       : module IID to serial
\& [3b] 1.3.6.1.4.1.9.5.1.3.1.1.26 (moduleSerialNumberString) : module IID to serial
.Ve
.IP "Brocade" 6
.IX Item "Brocade"
.Vb 4
\& [1] 1.3.6.1.4.1.1991.1.1.3.3.1.1.38 (snSwPortIfIndex)  : port IID to interface IID
\& [2] 1.3.6.1.4.1.1991.1.1.3.3.1.1.39 (snSwPortDescr)    : port IID to U/M/I
\&     Note: netsync assumes unit/module/interface (U/M/I) definitively maps unit to module IID.
\& [3] 1.3.6.1.4.1.1991.1.1.1.4.1.1.2  (snChasUnitSerNum) : module IID to serial
.Ve
.RE
.RS 5
.RE
.RE
.RS 4
.RE
.SS "6 Probe Level 1"
.IX Subsection "6 Probe Level 1"
If the probe option is used, netsync will not complete execution entirely,
and neither the devices nor the database will be modified.
Instead, resources are created to aid in future runs of netsync.
Probe functionality is broken into levels that correspond to netsync stages.
Each level is accumulative (i.e. level 2 does level 1, too).
.PP
Probe level 1 is specified using \-p1 and updates Probe1Cache.
.PP
During probe Level 1, netsync executes the discovery stage only.
After probing the network for active nodes (logging them appropriately),
it creates an RFC1035\-compliant list of them (default: \fIvar/dns.txt\fR).
This list may then be used as input to netsync to skip inactive nodes later.
.PP
Example
.Sp
.Vb 7
\& $ netsync.sh \-p1 \-D "sw[^.]+|hub[0\-9]+"
\& > configuring (using etc/netsync.ini)...
\& > discovering (using DBMS)...  780 nodes (50 inactive), 800 devices (10 stacks)
\& $ netsync.sh var/dns.txt
\& > configuring (using etc/netsync.ini)...
\& > discovering (using var/dns.txt)...  780 nodes, 800 devices (10 stacks)
\& > identifying (using DBMS)...  670 recognized (4 conflicts)
.Ve
.SS "7 Identification"
.IX Subsection "7 Identification"
Once netsync has a view of the network's hardware,
it requires a database to find information specific to each interface.
This database may be provided one of two ways:
.PP
\fIusing \s-1DBMS\s0 (recommended)\fR
.IX Subsection "using DBMS (recommended)"
.PP
This must be preconfigured in the configuration file and on the \s-1DBMS\s0.
.PP
\fIusing \-d .csv\fR
.IX Subsection "using -d .csv"
.PP
A RFC4180\-compliant database file may be specified using \-d.
.PP
About \s-1RFC4180\s0
.IX Subsection "About RFC4180"
.PP
\&\s-1RFC4180\s0 specifies a simple format (\s-1CSV\s0) for database files.
This format is almost universally supported making it useful for importing and exporting data.
Thus, for part 2 above, netsync accepts and produces RFC4180\-compliant files.
.PP
Note: Since netsync treats the database as read-only,
      it assumes the specified table and fields are already present and populated in the database.
.SS "8 Synchronization and Conflicts"
.IX Subsection "8 Synchronization and Conflicts"
netsync locates the entries of the database on the network.
If either DeviceField or InterfaceField are empty in a given row, the invalid row is skipped.
Valid rows are synchronized with the network.
Any entry that netsync synchronizes is logged in DeviceLog with previously unseen network locations.
.PP
Devices are located by searching for DeviceField values in its internal representation of the network.
Rows with unidentified (not found) devices are skipped.
Entries are then checked for conflicts.
.PP
Unless netsync is running in Quiet mode, it will ask whether you want to resolve conflicts or not.
Answering no is the same as running in Quiet mode, both cause conflicts to be resolved automatically.
.PP
There are 3 types of conflicts.
.PP
\fIUnidentified Interfaces\fR
.IX Subsection "Unidentified Interfaces"
.PP
This occurs when netsync fails to find an InterfaceField value on an identified device.
If interface auto-matching is not enabled, the unidentified interface is skipped,
or if probing (\-p) is used and the interface-specific information isn't empty,
the row is dumped (default: \fIunidentified.csv\fR).
Interface auto-matching is very likely to be helpful if the database manages interfaces numerically.
If enabled, it causes a database port such as 23 to align with ifNames such as ethernet23 or Gi1/0/23.
.PP
\fIDuplicate Entries\fR
.IX Subsection "Duplicate Entries"
.PP
This occurs when more than one entry for the same interface exists in the database.
During automatic resolution, the last entry seen is kept,
otherwise netsync will ask which entry to keep.
The motivation for this is the idea that entries farther into the file were likely added later.
.PP
\fIUnrecognized Devices & Interfaces\fR
.IX Subsection "Unrecognized Devices & Interfaces"
.PP
This occurs when hardware is found on the network but not in the database.
If conflicts aren't being automatically resolved and probing (\-p) is used,
you will be asked to initialize unrecognized hardware.
If the unrecognized hardware is not manually initialized, it will be logged in UnrecognizedLog.
.SS "9 Probe Level 2"
.IX Subsection "9 Probe Level 2"
Probe level 2 is specified using \-p2 and updates Probe1Cache, UnidentifiedCache, and Probe2Cache.
.PP
During probe level 2, netsync executes the discovery and identification stages only.
After probing the database for discovered nodes (logging them appropriately),
it creates an RFC4180\-compliant list of them (default: \fIvar/db.csv\fR).
This list may then be used as input to netsync to skip synchronization later.
.PP
Example
.Sp
.Vb 9
\& $ netsync.sh \-p2 \-D "sw[^.]+|hub[0\-9]+" \-a
\& > configuring (using etc/netsync.ini)...
\& > discovering (using DNS)...  780 nodes (50 inactive), 800 devices (10 stacks)
\& > identifying (using DBMS)...  670 recognized (4 conflicts)
\& > Do you want to resolve conflicts now? [y/n] n
\& $ netsync.sh \-d var/db.csv var/dns.txt
\& > configuring (using etc/netsync.ini)...
\& > discovering (using var/dns.txt)...  780 nodes, 800 devices (10 stacks)
\& > identifying (using var/db.csv)...  800 recognized
.Ve
.PP
Note: All unrecognized hardware will be present in Probe2Cache; however, no unidentified entries will.
      Instead, unidentified entries are stored in UnidentifiedCache.
      This is so the output of probe level 2 can serve as a sort of snapshot of the network in time.
.SS "10 Updating"
.IX Subsection "10 Updating"
All modifications made to any device are logged in UpdateLog.
.PP
If probing is not used, netsync attempts to actualize its internally synchronized network using \s-1SNMP\s0.
This is done by pushing gathered interface-specific information to the devices on the network.
This information is stored in the device at the specified SyncOID, and is overwritten anytime netsync updates it.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 4
\& $ netsync.sh \-D "sw[^.]+|hub[0\-9]+" \-a
\& > configuring (using etc/netsync.ini)...
\& > discovering (using DNS)...  780 nodes (50 inactive), 800 devices (10 stacks)
\& > identifying (using DBMS)...  670 recognized (4 conflicts)
.Ve
.PP

.PP
.Vb 4
\& $ dig axfr domain.tld | egrep ^(sw[^.]+|hub[0\-9]+) | netsync.sh
\& > configuring (using etc/netsync.ini)...
\& > discovering (using STDIN)...  780 nodes (50 inactive), 800 devices (10 stacks)
\& > identifying (using DBMS)...  670 recognized (4 conflicts)
.Ve
.PP

.PP
.Vb 7
\& $ netsync.sh \-p1 \-D "sw[^.]+|hub[0\-9]+"
\& > configuring (using etc/netsync.ini)...
\& > discovering (using DBMS)...  780 nodes (50 inactive), 800 devices (10 stacks)
\& $ netsync.sh var/dns.txt
\& > configuring (using etc/netsync.ini)...
\& > discovering (using var/dns.txt)...  780 nodes, 800 devices (10 stacks)
\& > identifying (using DBMS)...  670 recognized (4 conflicts)
.Ve
.PP

.PP
.Vb 8
\& $ netsync.sh \-p2 \-D "sw[^.]+|hub[0\-9]+" \-a
\& > configuring (using etc/netsync.ini)...
\& > discovering (using DNS)...  780 nodes (50 inactive), 800 devices (10 stacks)
\& > identifying (using DBMS)...  670 recognized (4 conflicts)
\& $ netsync.sh \-d var/db.csv var/dns.txt
\& > configuring (using etc/netsync.ini)...
\& > discovering (using var/dns.txt)...  780 nodes, 800 devices (10 stacks)
\& > identifying (using var/db.csv)...  800 recognized
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
David Tucker
.SH "LICENSE"
.IX Header "LICENSE"
This file is part of netsync.
netsync is free software: you can redistribute it and/or modify it under the terms of the \s-1GNU\s0 General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
netsync is distributed in the hope that it will be useful, but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of \s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.
See the \s-1GNU\s0 General Public License for more details.
You should have received a copy of the \s-1GNU\s0 General Public License along with netsync.
If not, see <http://www.gnu.org/licenses/>.
