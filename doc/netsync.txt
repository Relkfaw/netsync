         _             _          _          _      _        _          _              _      
        /\ \     _    /\ \       /\ \       / /\   /\ \     /\_\       /\ \     _    /\ \     
       /  \ \   /\_\ /  \ \      \_\ \     / /  \  \ \ \   / / /      /  \ \   /\_\ /  \ \    
      / /\ \ \_/ / // /\ \ \     /\__ \   / / /\ \__\ \ \_/ / /      / /\ \ \_/ / // /\ \ \   
     / / /\ \___/ // / /\ \_\   / /_ \ \ / / /\ \___\\ \___/ /      / / /\ \___/ // / /\ \ \  
    / / /  \/____// /_/_ \/_/  / / /\ \ \\ \ \ \/___/ \ \ \_/      / / /  \/____// / /  \ \_\ 
   / / /    / / // /____/\    / / /  \/_/ \ \ \        \ \ \      / / /    / / // / /    \/_/ 
  / / /    / / // /\____\/   / / /    _    \ \ \        \ \ \    / / /    / / // / /          
 / / /    / / // / /______  / / /    /_/\__/ / /         \ \ \  / / /    / / // / /________   
/ / /    / / // / /_______\/_/ /     \ \/___/ /           \ \_\/ / /    / / // / /_________\  
\/_/     \/_/ \/__________/\_\/       \_____\/             \/_/\/_/     \/_/ \/____________/


General Description
    
    netsync is a network synchronization tool that:
        -maps network interfaces to their respective (potentially stacked) devices
        -gathers interface-specific information from an asset management database
        -sends the information it gathers to each device
    All communication with network nodes is done using SNMP.
    The asset managment database is assumed to track devices by serial number.
    netsync also provides ways of producing useful information about the network.
    
    Note: The database is never edited.


Table of Contents
0........Invoking netsync
1........Options and Parameters
2........Settings
3........Data Structures
4........Discovery
5........Node Processing
6........Probe Level 1
7........Identification
8........Conflicts
9........Probe Level 2
10.......Updating

See doc/netsync.svg for corresponding visual guidance.




0 Invoking netsync
    
    Being a perl program, netsync may be invoked manually out of the source code directly;
    however, this is not the suggested method for running netsync for 2 reasons.
    First, netsync was made to run from the top directory so paths are simpler (e.g. etc/netsync.ini).
    Running manually requires calling src/netsync or bin/netsync with the appropriate library path (see below).
    Second, netsync creates extensive log files that should be cleared periodically.
    netsync is designed to be run regularly, and it can handle its log files automatically.
    To use this feature, netsync must be invoked by the script included in the top directory (netsync.sh).
    The script creates an executable copy of the source code in bin/ and runs it with the appropriate libraries.
    Logs older than 6 hours (adjustable) are automatically erased whenever netsync.sh is run.
    
    Libraries:
        A generic set of useful packages used by netsync is stored in the Toolbox module in src/lib/.
        Following is a brief description of each:
            Toolbox::Configurator  - methods for handling configuration files and default settings
            Toolbox::FileManager   - methods for handling I/O automatically and efficiently
            Toolbox::TimeKeeper    - methods for retrieving reliable chronological measurements
            Toolbox::UserInterface - methods for interacting with the user




1 Options and Parameters
    
    Options:
    -h --help   Help. Print usage and options.
    -q          Quiet. Print nothing.
    -v          Verbose. Print everything.
    -V          Version. Print build information.
    -c .ini     Specify a configuration file to use. (default: etc/netsync.ini)
    -p #        Probe. There are 2 probe levels:
                    1: Probe the network for active nodes.
                    2: Probe the database for those nodes.
    -D pattern  Use DNS to retrieve a list of hosts matching the pattern.
                    Hint: Use the pattern 'all' to turn off the hostname filter.
    -d .csv     Specify an RFC4180-compliant database file to use.
    -a          Enable interface auto-matching.
    
    Parameters:
    [nodes]     Specify an RFC1035-compliant network node list to use.
    
    
    -Help and Version print information and exit, netsync is not executed in either case.
    -If both Quiet and Verbose mode are used simultaneously, they cancel each other out.
    -Either -D pattern or nodes must be specified. If neither are present, input will be read from standard input (a pipe or the keyboard).
    -Interface auto-matching is very likely to be helpful if the database manages interfaces numerically.
     It causes a database port such as 23 to align with ifNames such as ethernet23 or Gi1/0/23.




2 Settings
    
    A configuration file may be specified using the -c option. Otherwise, a generic configuration file (etc/netsync.ini) is provided,
    but it does not have enough information for netsync to run out-of-the-box.
    Namely, the following settings must be provided for a sufficient runtime environment (in the order they are needed):
        
        [DNS]
        domain - a FQDN e.g. example.com
        
        Note: DNS settings are not necessary if only RFC1035-compliant node lists will be used (see [nodes]).
        
        
        [SNMP] *Although netsync will work out-of-the-box on a network with default SNMP settings, it is not recommended to operate such a network.
        Version - SNMPv3 is *HIGHLY* suggested.
        
        If using SNMPv2:
        Community - The SNMP community to address (default: public).
        
        If using SNMPv3:
        SecLevel - If this is left default, there isn't much benefit to using SNMPv3 over v2.
        SecName  - username (default: initial)
        AuthPass - the authentication (access) key
        PrivPass - the privacy (encryption) key
        
        
        [DB]
        DBMS     - the type of database e.g. Oracle
        Server   - the database location
        Port     - the database location
        Database - the name of the database
        DSN      - DBMS-specific connection details
        Username - the name of a user that has access to the database
        Password - the authentication key of the user
        
        Note: DB settings are not necessary if only RFC4180-compliant database (.csv) files will be used (see -d).
        
        [netsync]
        Table          - the name of the table in the database that contains the following fields
        DeviceField    - the name of the field that provides a unique ID for each device
        InterfaceField - the name of the field that holds interface names retrieved via SNMP from the IF-MIB OID 1.3.6.1.2.1.31.1.1.1.1 (ifName)
        InfoFields     - a comma-separated list of field names containing interface-specific information
        
        SyncOID        - The values of InfoFields will be concatenated (respectively) and stored in the device at this OID.
        
        Format:
        
                                      Table
            ---------------------------------------------------------
            |  DeviceField  |  InterfaceField  |  InfoFields...     |            __________
            ---------------------------------------------------------           |          |
            |   (serial)    |     (ifName)     |(interface-specific)|   --->    | netsync  |    --->    SyncOID
            |                          ...                          |           |__________|
            ---------------------------------------------------------
        
        Note: Once netsync has aligned an interface in the database with its counterpart on the network, it will overwrite the device with the InfoFields in the database.
    
    
    Non-essential settings:
    Indent    - a formatting option that is used in verbose mode to specify the number of spaces to proceed details of a previous line
    NodeOrder - a formatting option that can be used to adapt shown counts to any size network (must be > 0)
    
        Example:
            
            NodeOrder = 3 (nodes < 1000), 780 nodes
            > discovering (using DNS)... 780 nodes (50 inactive), 800 devices (10 stacks)
            
            NodeOrder = 9 (nodes < 1000000000), 780 nodes
            > discovering (using DNS)...       780 nodes (50 inactive), 800 devices (10 stacks)
            
            NodeOrder = 1 (nodes < 10), 24 nodes !
            > discovering (using DNS)... 1111111111222224 nodes (5 inactive), 26 devices (1 stack)
    
    
    Explanation of each log and cache file will be provided in context below.




3 Data Structures
    
    netsync builds an internal view of the network as follows:
        -Each node is associated with its IP address and device(s).
        -Each device is associated with is serial and interface(s).
        -Each interface is associated with interface-specific information from the database.
    
    The resulting data structure could then be described as a list of trees.
    |-> node (IP)
    |-> node (IP)
    |-> node (IP)
    |                              -interface (ifName)
    |                             /
    |             -device (serial)--interface (ifName)
    |            /                \
    |-V node (IP)                  -interface (ifName)
    |            \
    |             -device (serial)--interface (ifName)
    |                             \
    |                              -interface (ifName)
    |-> node (IP)
    |-> node (IP)
    |                              -interface (ifName)
    |                             /
    |-V node (IP)--device (serial)--interface (ifName)
    |                             \
    |                              -interface (ifName)
    |-> node (IP)
    |-> node (IP)
    |-> node (IP)
    |-> node (IP)
    ...
    
    
    Structure States:
        node
                  active : reachable and responsive node
                inactive : an unreachable or unresponsive node
                
        device/interface
              recognized : found on the network and in the database
            unrecognized : found on the network but not in the database
              identified : found in the database and on the network
            unidentified : found in the database but not on the network
        
        Note: Only the following relationships exist between states internally:
                     recognized <-> identified
            unrecognized device --> unrecognized interfaces
            unidentified device --> unidentified interfaces



4 Discovery
    
    The first task netsync has is to find all relevant nodes on the network.
    Relevant nodes are specified one of three ways:
        
        1: via -D pattern
            The pattern is applied to the hostname in RFC1035-compliant input.
            Example:
                $ netsync.sh -D "sw[^.]+|hub[0-9]+"
                www.example.com            <-- no match (www)
                hub123.example.com         <-- match (hub123)
                sw1234.example.com         <-- match (sw1234)
        
        2: via [nodes]
            [nodes] is a path to a file containing an RFC1035-compliant list of relevant nodes
            Note: No pattern is applied to the hosts in the list.
                  If you have a list that is a superset of the nodes you want to test, option 3 is for you.
        
        3: via (pipe or keyboard)
            When no input directives are detected, netsync attempts to pull a node list from standard input.
            This allows pipelining with dig, grep, and other useful command-line utilities for extended functionality.
            Example:
                $ dig axfr example.com | grep hub123 | netsync.sh
                                      -OR-
                $ cat superset.txt | grep hub[0-9]+ | netsync.sh
    
    About RFC1035:
        RFC1035 specifies a satisfactory format for resource records found in a nameserver (see 3.2.1).
        This format is used to produce the output of the popular command-line utility dig.
        Thus, for clean pipes as described in part 3 above, netsync accepts RFC1035-compliant input.
    
    Note: Only A or AAAA records with valid IPv4 or IPv6 addresses are used.
    
    
    Once all relevant nodes have been specified, netsync must attempt to contact each to see if it is active.




5 Node Processing
    
    Any node that netsync attempts to contact is logged in NodeLog with the results of the attempt.
    If the node is active, netsync will try to extract the serial numbers of all devices present at that node.
    If more than one serial is discovered, netsync will try to map interfaces to each device (serial).
    
    Supported vendors:      Supported stack vendors:
        Brocade                 Brocade
        Cisco                   Cisco
        HP
    
    Note: Only ASCII serials are supported.
    
    
    Altogether the following OIDs are used to accomplish this task:
        Extract interfaces.
            Standard
                1.3.6.1.2.1.2.2.1.3 (ifType) for appropriate interface IID
                    excluded: other(1), softwareLoopback(24), propVirtual(53)
                1.3.6.1.2.1.31.1.1.1 (ifName) for interface IID to ifName
                1.3.6.1.2.1.2.2.1.2 (ifDescr)
            non-Standard
                (unsupported)
        Extract serials.
            Standard
                1.3.6.1.2.1.47.1.1.1.1.5 (entPhysicalClass) for appropriate device IID
                    included: chassis(3)
                1.3.6.1.2.1.47.1.1.1.1.11 (entPhysicalSerialNum) for device IID to serial
            non-Standard
                Cisco
                    1.3.6.1.4.1.9.5.1.3.1.1.3 (moduleSerialNumber) for serial
                    1.3.6.1.4.1.9.5.1.3.1.1.26 (moduleSerialNumberString) for serial
                Brocade
                    1.3.6.1.4.1.1991.1.1.1.4.1.1.2 (snChasUnitSerNum) for serial
                    1.3.6.1.4.1.1991.1.1.1.1.2 (snChasSerNum) for serial
                        Note: This OID does NOT support stacks.
                HP
                    1.3.6.1.4.1.11.2.36.1.1.2.9 (hpHttpMgSerialNumber)
        Map interfaces to serials.
            Standard
                (unsupported)
            non-Standard
                Cisco
                    1.3.6.1.4.1.9.5.1.4.1.1.11 (portIfIndex) for port IID to interface IID
                    1.3.6.1.4.1.9.5.1.4.1.1.1 (portModuleIndex) for port IID to module IID
                    1.3.6.1.4.1.9.5.1.3.1.1.3 (moduleSerialNumber) for module IID to serial
                    1.3.6.1.4.1.9.5.1.3.1.1.26 (moduleSerialNumberString)
                Brocade
                    1.3.6.1.4.1.1991.1.1.3.3.1.1.38 (snSwPortIfIndex) for port IID to interface IID
                    1.3.6.1.4.1.1991.1.1.3.3.1.1.39 (snSwPortDescr) for port IID to U/M/I
                        Note: netsync assumes unit/module/interface (U/M/I) definitively maps unit to module IID.
                    1.3.6.1.4.1.1991.1.1.1.4.1.1.2 (snChasUnitSerNum) for module IID to serial
    
    
    In Verbose mode, the results of these attempts are printed to the console (instead of only counts).




6 Probe Level 1
    
    Probe level 1 is specified using -p1 and updates Probe1Cache.
    
    During probe Level 1, netsync executes the discovery stage only.
    After probing the network for active nodes (logging them appropriately),
    it creates an RFC1035-compliant list of them (default: var/dns.txt).
    This list may then be used as input to netsync to skip inactive nodes later.
    
    Example:
        $ netsync.sh -p1 -D "sw[^.]+|hub[0-9]+"
        > configuring (using etc/netsync.ini)...
        > discovering (using DBMS)...  780 nodes (50 inactive), 800 devices (10 stacks)
        
        $ netsync.sh var/dns.txt
        > configuring (using etc/netsync.ini)...
        > discovering (using var/dns.txt)...  780 nodes, 800 devices (10 stacks)
        > identifying (using DBMS)...  670 recognized (4 conflicts)




7 Identification
    
    Once netsync has a view of the network's hardware,
    it requires a database to find information specific to each interface.
    This database may be provided one of two ways:
        1: DBMS (recommended)
            This must be preconfigured in the configuration file and on the DBMS.
        2: RFC4180-compliant database file
            A comma-separated value (.csv) file may be specified using -d.
    
    About RFC4180
        RFC4180 specifies a simple format for database files.
        This format is almost universally supported making it useful for importing and exporting data.
        Thus, for part 2 above, netsync accepts RFC4180-compliant input.
    
    Note: Since netsync treats the database as read-only,
          it assumes the specified table and fields are already present and populated in the database.
    
    netsync locates the entries of the database on the network.
    If either DeviceField or InterfaceField are empty in a given row, the invalid row is skipped.
    Every valid row that is examined and its location (if present) are logged in DeviceLog.
    Devices are located by searching for a row's DeviceField value in its internal representation of the network.
    Rows with unidentified (not found) devices are skipped.
    Entries are then checked for conflicts.




8 Conflicts
    
    Unless netsync is running in Quiet mode, it will ask whether you want to resolve conflicts or not.
    Answering no is the same as running in quiet mode.
    Both cases cause conflicts to be resolved automatically.
    
    There are 3 types of conflicts:
        
        - unidentified interfaces
            This occurs when netsync tries to find an interface for an identified device that matches a row's InterfaceField value.
            If a direct match is not made and interface auto-matching is not enabled,
            the unidentified interface is skipped, or if probing (-p) is used and the interface-specific information isn't empty,
            the row is logged (default: unidentified.csv).
            If auto-matching is enabled, it causes a database port such as 23 to align with ifNames such as ethernet23 or Gi1/0/23.
            Interface auto-matching is very likely to be helpful if the database manages interfaces numerically.
        
        - duplicate entries
            This occurs when more than one entry for the same interface exists in the database.
            During automatic resolution, the last entry seen is kept.
            The motivation for this is the idea that entries farther into the file were likely added later chronologically.
        
        - unrecognized devices/interfaces
            This occurs when hardware is found on the network but not in the database.
            If conflicts aren't being automatically resolved and progibng (-p) is used,
            you will be asked to initialize unrecognized hardware.
            If the unrecognized hardware is not manually initialized, it will be logged in UnrecognizedLog.




9 Probe Level 2
    
    Probe level 2 is specified using -p2 and updates Probe1Cache, UnidentifiedCache, and Probe2Cache.
    
    During probe level 2, netsync executes the discovery and identification stages only.
    After probing the database for discovered nodes (logging them appropriately),
    it creates an RFC4180-compliant list of them (default: var/db.csv).
    This list may then be used as input to netsync to skip synchronization later.
    
    Example:
        $ netsync.sh -p2 -D "sw[^.]+|hub[0-9]+" -a
        > configuring (using etc/netsync.ini)...
        > discovering (using DNS)...  780 nodes (50 inactive), 800 devices (10 stacks)
        > identifying (using DBMS)...  670 recognized (4 conflicts)
        > Do you want to resolve conflicts now? [y/n] n
        
        $ netsync.sh -d var/db.csv var/dns.txt
        > configuring (using etc/netsync.ini)...
        > discovering (using var/dns.txt)...  780 nodes, 800 devices (10 stacks)
        > identifying (using var/db.csv)...  800 recognized
    
    Note: No unidentified entries will be present in Probe2Cache; however, all unrecognized hardware will.
          Instead, unidentified entries are stored in UnidentifiedCache.
          This is so the output of probe level 2 can serve as a sort of snapshot of the network in time.




10 Updating
    
    If probing is not used, netsync attempts to actualize its internal view of the network using SNMP.
    This is done by pushing gathered interface-specific information to the devices on the network.
    This information is stored in the device at the specified SyncOID, and is overwritten anytime netsync updates it.
    
    All modifications made to any device are logged in UpdateLog.




