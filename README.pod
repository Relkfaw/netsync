=head1 NAME

netsync - network/database utility

=head1 SYNOPSIS

C<netsync [-hVvqcpDmdau] [nodes]>

=head1 DESCRIPTION

netsync is a network synchronization tool that:

 - maps network interfaces to their respective (potentially stacked) devices
 - gathers interface-specific information from an asset management database
 - sends the information it gathers to each device
 - provides ways of producing useful information about the network

Note: All communication with network nodes is done using SNMP.

=head2 Overview

In a typical run, execution begins by parsing a configuration file (-c).
Next, netsync searches for active network devices at each node.
Nodes may be specified using [nodes], DNS (-D), or standard input (STDIN).
Furthermore, nodes may be required to match a hostname pattern (-m).
Gathered information may be used to identify each device in a database.
Identified devices may then be updated (-u) with interface-specific information.

See F</usr/share/netsync/algorithm.svg> for corresponding visual guidance.

=head2 0 Invocation

=head3 Suggested Method #XXX : what about Build.PL

netsync may be installed or removed using the same script, F<netsync.sh>.

 $ netsync.sh install

Z<>

 $ netsync.sh remove

It is advised that netsync be run as a cron job periodically.

=head3 Perl

It is simple to invoke the Perl implementation manually.
The easiest way is to use the provided script, F<neysync.sh>.
If the first argument to the script is not "install" or "remove",
it will assume the arguments are options and parameters to be passed to netsync.

 $ netsync.sh --help

Note: This feature should work whether netsync has been installed or not.

=head4 Libraries #XXX : appropriate name?

=over 5

=item Configurator

methods for handling configuration files and default settings

=item Configurator::SNMP

methods for handling SNMP communications

=item FileManager

methods for handling I/O automatically and efficiently

=item Netsync::Networker

methods for manipulating netsync's internal view of a network

=item Netsync::UI

methods for interacting with a user

=back

=head4 Manual Invocation

 $ perl -I lib src/netsync.pl

=head2 1 Runtime Configuration

=head3 Options

=head4 -h --help

Help. Print usage and options.

Note: Help and Version print information and exit.
      Normal execution is skipped when either of these options are used.

=head4 -V

Version. Print build information.

Note: Help and Version print information and exit.
      Normal execution is skipped when either of these options are used.

=head4 -v

Verbose. Print everything.

Note: If Quiet and Verbose mode are used simultaneously, they cancel out.

=head4 -q

Quiet. Print nothing.

Note: If Quiet and Verbose mode are used simultaneously, they cancel out.

=head4 -c .ini

Config. Specify a configuration file to use. (default: F</etc/netsync/netsync.ini>)

=head4 -p #

Probe. There are 2 Probe levels:

 1: Probe the network for active nodes.
 2: Probe the database for those nodes.

If the Probe option is used, resources will be created to aid in future runs.

Note: Each level corresponds to a stage of execution and is accumulative.

=head4 -D

DNS. Use your network's domain name system to retrieve a list of nodes.

=head4 -m pattern

Match. Only discover nodes with hostnames matching the given pattern.

=head4 -d .csv

Database. Specify an RFC4180-compliant database file to use.

=head4 -a

Automatch. Enable interface auto-matching.

Note: Interface auto-matching is very likely to be helpful if the database manages interfaces numerically.
      If enabled, it causes a database port such as 23 to align with ifNames such as ethernet23 or Gi1/0/23.

=head4 -u

Update. Send interface-specific information to network nodes.

=head3 Parameters

=head4 [nodes]

Nodes. Specify an RFC1035-compliant list of network nodes to use.

Note: If neither DNS (-D) nor Nodes ([nodes]) are specified,
      input will be read from standard input (STDIN).

=head2 2 Settings

A configuration file may be specified using the Config (-c) option.
Otherwise, a generic configuration file (F</etc/netsync/netsync.ini>) is used,
but it does not have enough information for netsync to be fully functional out-of-the-box.
Namely, the following settings must be provided for a typical runtime environment:

=head3 DNS

Note: DNS settings are not necessary if only Nodes ([nodes]) will be used.

=over 4

=item domain

LAN domain name (e.g. example.com)

=back

=head3 SNMP

=head4 Required

=over 4

=item Version

Note: SNMP settings are not necessary if a default SNMP environment is used;
      however, this is HIGHLY insecure and discouraged.

=over 5

=item SNMPv3 (recommended)

=over 6

=item SecLevel

the level of security to deploy (default: noAuthNoPriv)

It may be one of the following:

=over 7

=item noAuthNoPriv

This causes SNMPv3 to mimic v2!

=item authNoPriv

=item authPriv

=back

=item SecName

username (default: initial)

=item AuthPass

the access (authentication) key

=item PrivPass

the privacy (encryption) key

=back

=item SNMPv2

=over 6

=item Community

the SNMP community to address (default: public).

=back

=back

Optional

=over 5

=item MIBdir (SNMP)

the location of required MIBs (default: F</usr/lib/netsync/mib/>)

Requirements

=over 5

=item standard

=over 6

=item IF-MIB

=item ENTITY-MIB

=back

=item Cisco

=over 6

=item CISCO-STACK-MIB

=back

=item Brocade

=over 6

=item FOUNDRY-SN-AGENT-MIB

=item  FOUNDRY-SN-SWITCH-GROUP-MIB

=back

=item HP

=over 6

=item SEMI-MIB

=back

=back

=back

=back

=head3 DB

Note: DB settings are not necessary if only Database (-d) will be used.

=over 4

=item DBMS

the type of database (i.e. a Perl DBD, e.g. Pg, mysql, Oracle, etc.).

=item Server

the database network location

=item Port

the database transport location

=item Database

the name of the database to use

=item Username

the name of a user that has access to the database

=item Password

the authentication key of the user

=back

=head3 netsync

Note: netsync settings are specific to F</usr/bin/netsync> only.

Synopsis

                           Table
 ---------------------------------------------------------
 |  DeviceField  |  InterfaceField  |  InfoFields...     |
 ---------------------------------------------------------           =============
 |   (serial)    |     (ifName)     |(interface-specific)|   --->    || SyncOID ||
 |                          ...                          |           =============
 ---------------------------------------------------------                (device)

Note: Once netsync has identified an interface in the database,
      it will overwrite the device with the corresponding InfoFields.

=over 4

=item Table

the name of the table in the database that contains the following fields

=item DeviceField

the field that provides a unique ID for each device (typically a serial number)

=item InterfaceField

the field that holds interface names retrieved from the IF-MIB (ifName) via SNMP

=item InfoFields

a comma-separated list of fields containing interface-specific information

=item SyncOID

Values from InfoFields will be concatenated and stored in the device at this MIB location via SNMP.

=back

Note: Explanation of each log and cache file will be provided in context below. #XXX


The following settings are not required.
They are included for clarity of purpose.

=over 4

=item NodeOrder (netsync)

a formatting option to adapt discovered node counts to any size network (must be > 0)

Example

=over 5

=item NodeOrder = 3 (nodes < 1000), 500 nodes

 > discovering (using DNS)... 500 nodes (50 inactive), 600 devices (50 stacks)

=item NodeOrder = 9 (nodes < 1000000000), 500 nodes

 > discovering (using DNS)...       500 nodes (50 inactive), 600 devices (50 stacks)

=item NodeOrder = 1 (nodes < 10), 20 nodes !

 > discovering (using DNS)... 111111111120 nodes (2 inactive), 24 devices (2 stacks)

=back

=head2 3 Data Structures

Netsync builds an internal view of the network whenever it is used.
Each node is associated with its IP address and device(s).
Each device is associated with its serial number and interface(s).
Each interface is associated with its ifName and interface-specific information from the database.

The resulting data structure could be described as a list of trees.

 |-> node (IP)
 |-> node (IP)
 |-> node (IP)
 |                              -interface (ifName)
 |                             /
 |             -device (serial)--interface (ifName)
 |            /                \
 |-V node (IP)                  -interface (ifName)
 |            \
 |             -device (serial)--interface (ifName)
 |                             \
 |                              -interface (ifName)
 |-> node (IP)
 |-> node (IP)
 |                              -interface (ifName)
 |                             /
 |-V node (IP)--device (serial)--interface (ifName)
 |                             \
 |                              -interface (ifName)
 |-> node (IP)
 |-> node (IP)
 |-> node (IP)
 |-> node (IP)
 ...

=head3 States

=head4 Nodes

       active : reachable and responsive
     inactive : unreachable or unresponsive

=head4 Devices & Interfaces

   recognized : found on the network and in the database
 unrecognized : found on the network but not in the database
   identified : found in the database and on the network
 unidentified : found in the database but not on the network

Invariants

=over 5

          recognized <-> identified
 unrecognized device --> unrecognized interfaces
 unidentified device --> unidentified interfaces

=back

=head2 4 Discovery

The first task netsync has is to find all relevant nodes on the network.
Relevant nodes are specified one of three ways:

=head3 using -D pattern

The pattern is used to select appropriate hosts.

Note: Only A or AAAA records with valid IPv4 or IPv6 addresses are used.

Example

=over 4

 $ netsync.sh -D "sw[^.]+|hub[0-9]+"
 www.example.com            <-- no match (www)
 hub123.example.com         <-- match (hub123)
 sw1234.example.com         <-- match (sw1234)

=back

=head3 using [nodes]

[nodes] is a path to a file containing an RFC1035-compliant list of relevant nodes.

=head4 About RFC1035

RFC1035 specifies a satisfactory format for resource records found in a nameserver (see 3.2.1).
This format is used to produce the output of the popular command-line utility dig.
Thus, for simple pipes as described in part 3 above, netsync accepts RFC1035-compliant input.

=head3 using (pipe or keyboard)

When no input directives are detected, netsync attempts to pull a node list from standard input.
This allows pipelining with dig, grep, and other command-line utilities for extended functionality.

Examples

=over 4

 $ dig axfr example.com | grep hub123 | netsync.sh

Z<>

 $ cat superset.txt | grep hub[0-9]+ | netsync.sh

=back

=head2 5 Node Processing

Once all relevant nodes have been specified, netsync must attempt to contact each to see if it is active.
Any node that netsync attempts to contact is logged in NodeLog with the results of the attempt.
If the node is active, netsync will try to extract the serial numbers of all devices present at that node.
If more than one serial is discovered, netsync will try to map interfaces to each device (serial).

Note: Only ASCII serials are supported.

=head3 Supported Node Vendors

=over 4

=item Brocade

=item Cisco

=item HP

=back

=head3 Supported Stack Vendors

=over 4

=item Brocade

=item Cisco

=back

=head3 Mapping Process

=over 4

=item 1 Extract interfaces.

=over 5

=item standard

=over 6

=item 1.3.6.1.2.1.2.2.1.3 : ifType

Interfaces with the follwing ifTypes are excluded:

=over 7

=item other(1)

=item softwareLoopback(24)

=item propVirtual(53)

=back

=item 1.3.6.1.2.1.31.1.1.1 : ifName

Note: ifDescr (1.3.6.1.2.1.2.2.1.2) will be used if, for some reason, ifName is not present.

=back

=item proprietary

(unsupported)

=back

=item 2 Extract serials.

=over 5

=item standard

=over 6

=item 1.3.6.1.2.1.47.1.1.1.1.5 : entPhysicalClass

Entities with the following entPhysicalClass are included:

=over 7

=item chassis(3)

=back

=item 1.3.6.1.2.1.47.1.1.1.1.11 : entPhysicalSerialNum

=back

=item proprietary

Note: Multiple OIDs are tried in case one is not present.

=over 6

=item Cisco

=over 7

=item 1.3.6.1.4.1.9.5.1.3.1.1.3 : moduleSerialNumber

=item 1.3.6.1.4.1.9.5.1.3.1.1.26 : moduleSerialNumberString

=back

=item Brocade

=over 7

=item 1.3.6.1.4.1.1991.1.1.1.4.1.1.2 : snChasUnitSerNum

=item 1.3.6.1.4.1.1991.1.1.1.1.2 : snChasSerNum

Note: This OID does NOT support stacks.

=back

=item HP

=over 7

=item 1.3.6.1.4.1.11.2.36.1.1.2.9 : hpHttpMgSerialNumber

=back

=back

=back

=item 3 Map interfaces to serials.

=over 5

=item standard

(unsupported)

=item proprietary

=over 6

=item Cisco

=over 7

=item 1.3.6.1.4.1.9.5.1.4.1.1.11 : portIfIndex

=item 1.3.6.1.4.1.9.5.1.4.1.1.1 : portModuleIndex

=item 1.3.6.1.4.1.9.5.1.3.1.1.3 : moduleSerialNumber

=item 1.3.6.1.4.1.9.5.1.3.1.1.26 : moduleSerialNumberString

=back

=item Brocade

=over 7

=item 1.3.6.1.4.1.1991.1.1.3.3.1.1.38 : snSwPortIfIndex

=item 1.3.6.1.4.1.1991.1.1.3.3.1.1.39 : snSwPortDescr

Note: netsync assumes unit/module/interface (U/M/I) definitively maps unit to module IID.

=item 1.3.6.1.4.1.1991.1.1.1.4.1.1.2 : snChasUnitSerNum

=back

=back

=back

=back

=head2 6 Probe Level 1

Probe level 1 is specified using -p1 and updates Probe1Cache.

During probe Level 1, netsync executes the discovery stage only.
After probing the network for active nodes (logging them appropriately),
it creates an RFC1035-compliant list of them (default: F</var/cache/netsync/dns.txt>).
This list may then be used as input to netsync to skip inactive nodes later.

Example

=over 3

 $ netsync.sh -p1 -D "sw[^.]+|hub[0-9]+"
 > configuring (using /etc/netsync/netsync.ini)...
 > discovering (using DBMS)...  780 nodes (50 inactive), 800 devices (10 stacks)
 $ netsync.sh /var/cache/netsync/dns.txt
 > configuring (using /etc/netsync/netsync.ini)...
 > discovering (using /var/cache/netsync/dns.txt)...  780 nodes, 800 devices (10 stacks)
 > identifying (using DBMS)...  670 recognized (4 conflicts)

=back

=head2 7 Identification

Once netsync has a view of the network's hardware,
it requires a database to find information specific to each interface.

Note: Since netsync treats the database as read-only,
      it assumes the specified table and fields are already present and populated in the database.

The database may be provided one of two ways:

=head3 using DBMS (recommended)

This must be preconfigured in the configuration file and on the DBMS.

=head3 using -d .csv

A RFC4180-compliant database file may be specified using -d.

=head4 About RFC4180

RFC4180 specifies a simple format (CSV) for database files.
This format is almost universally supported making it useful for importing and exporting data.
Thus, for part 2 above, netsync accepts and produces RFC4180-compliant files.

=head2 8 Synchronization and Conflicts

netsync locates the entries of the database on the network.
If either DeviceField or InterfaceField are empty in a given row, the invalid row is skipped.
Valid rows are synchronized with the network.
Any entry that netsync synchronizes is logged in DeviceLog with previously unseen network locations.

Devices are located by searching for DeviceField values in its internal representation of the network.
Rows with unidentified (not found) devices are skipped.
Entries are then checked for conflicts.

Unless netsync is running in Quiet mode, it will ask whether you want to resolve conflicts or not.
Answering no is the same as running in Quiet mode, both cause conflicts to be resolved automatically.


There are 3 types of conflicts.

=head3 Unidentified Interfaces

This occurs when netsync fails to find an InterfaceField value on an identified device.
If interface auto-matching is not enabled, the unidentified interface is skipped,
or if probing (-p) is used and the interface-specific information isn't empty,
the row is dumped (default: F</var/cache/netsync/unidentified.csv>).
Interface auto-matching is very likely to be helpful if the database manages interfaces numerically.
If enabled, it causes a database port such as 23 to align with ifNames such as ethernet23 or Gi1/0/23.

=head3 Duplicate Entries

This occurs when more than one entry for the same interface exists in the database.
During automatic resolution, the last entry seen is kept,
otherwise netsync will ask which entry to keep.
The motivation for this is the idea that entries farther into the file were likely added later.

=head3 Unrecognized Devices & Interfaces

This occurs when hardware is found on the network but not in the database.
If conflicts aren't being automatically resolved and probing (-p) is used,
you will be asked to initialize unrecognized hardware.
If the unrecognized hardware is not manually initialized, it will be logged in UnrecognizedLog.

=head2 9 Probe Level 2

Probe level 2 is specified using -p2 and updates Probe1Cache, UnidentifiedCache, and Probe2Cache.

During probe level 2, netsync executes the discovery and identification stages only.
After probing the database for discovered nodes (logging them appropriately),
it creates an RFC4180-compliant list of them (default: F</var/cache/netsync/db.csv>).
This list may then be used as input to netsync to skip synchronization later.

Example

=over 3

 $ netsync.sh -p2 -D "sw[^.]+|hub[0-9]+" -a
 > configuring (using /etc/netsync/netsync.ini)...
 > discovering (using DNS)...  780 nodes (50 inactive), 800 devices (10 stacks)
 > identifying (using DBMS)...  670 recognized (4 conflicts)
 > Do you want to resolve conflicts now? [y/n] n
 $ netsync.sh -d /var/cache/netsync/db.csv /var/cache/netsync/dns.txt
 > configuring (using /etc/netsync/netsync.ini)...
 > discovering (using /var/cache/netsync/dns.txt)...  780 nodes, 800 devices (10 stacks)
 > identifying (using /var/cache/netsync/db.csv)...  800 recognized

=back

Note: All unrecognized hardware will be present in Probe2Cache; however, no unidentified entries will.
      Instead, unidentified entries are stored in UnidentifiedCache.
      This is so the output of probe level 2 can serve as a sort of snapshot of the network in time.

=head2 10 Updating

All modifications made to any device are logged in UpdateLog.

If probing is not used, netsync attempts to actualize its internally synchronized network using SNMP.
This is done by pushing gathered interface-specific information to the devices on the network.
This information is stored in the device at the specified SyncOID, and is overwritten anytime netsync updates it.

=head1 EXAMPLES

 $ netsync.sh -D "sw[^.]+|hub[0-9]+" -a
 > configuring (using /etc/netsync/netsync.ini)...
 > discovering (using DNS)...  780 nodes (50 inactive), 800 devices (10 stacks)
 > identifying (using DBMS)...  670 recognized (4 conflicts)

Z<>

 $ dig axfr domain.tld | egrep ^(sw[^.]+|hub[0-9]+) | netsync.sh
 > configuring (using /etc/netsync/netsync.ini)...
 > discovering (using STDIN)...  780 nodes (50 inactive), 800 devices (10 stacks)
 > identifying (using DBMS)...  670 recognized (4 conflicts)

Z<>

 $ netsync.sh -p1 -D "sw[^.]+|hub[0-9]+"
 > configuring (using /etc/netsync/netsync.ini)...
 > discovering (using DBMS)...  780 nodes (50 inactive), 800 devices (10 stacks)
 $ netsync.sh /var/cache/netsync/dns.txt
 > configuring (using /etc/netsync/netsync.ini)...
 > discovering (using /var/cache/netsync/dns.txt)...  780 nodes, 800 devices (10 stacks)
 > identifying (using DBMS)...  670 recognized (4 conflicts)

Z<>

 $ netsync.sh -p2 -D "sw[^.]+|hub[0-9]+" -a
 > configuring (using /etc/netsync/netsync.ini)...
 > discovering (using DNS)...  780 nodes (50 inactive), 800 devices (10 stacks)
 > identifying (using DBMS)...  670 recognized (4 conflicts)
 $ netsync.sh -d /var/cache/netsync/db.csv /var/cache/netsync/dns.txt
 > configuring (using /etc/netsync/netsync.ini)...
 > discovering (using /var/cache/netsync/dns.txt)...  780 nodes, 800 devices (10 stacks)
 > identifying (using /var/cache/netsync/db.csv)...  800 recognized

=head1 AUTHOR

David Tucker

=head1 LICENSE

This file is part of netsync.
netsync is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
netsync is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with netsync.
If not, see L<http://www.gnu.org/licenses/>.

=head1 ADDED SOON

=over 2

=item ProbeLevel

Probe Levels

=over 6

=item 1 Probe the network for active nodes.

=item 2 Probe the database for those nodes.

=back

Note: If the probe option is used, netsync will not complete execution entirely,
and neither the devices nor the database will be modified.
Instead, resources are created to aid in future runs of netsync.
Probe functionality is broken into levels that correspond to netsync stages.
Each level is accumulative (i.e. level 2 does level 1, too).

default: 0

=item Probe1Cache

where probe level 1 RFC1035 output is stored

default: F</var/cache/E<lt>script nameE<gt>/dns.txt>

=item Probe2Cache

where probe level 2 RFC4180 output is stored

default: F</var/cache/E<lt>script nameE<gt>/db.csv>

=back

=cut
